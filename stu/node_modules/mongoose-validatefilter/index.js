/**
 * Schema 的静态方法
 * 数据库 Object 类型字段的增删改
 * @version 1.2
 * @author ydr.me
 */


/**
 * v1.0
 * 2014年4月12日22:00:29
 * 构造
 *
 * v1.1
 * 2014年4月17日22:53:09
 * 重写
 * 2014年4月18日21:39:00
 * 封装
 * 2014年4月20日17:46:08
 * 修复了filter的BUG
 * 2014年4月27日21:58:01
 * 修复了一个BUG
 * 2014年4月29日02:01:46
 * beforeUpdateOne、beforeRemoveOne 回调参数变化
 * 2014年5月2日00:20:38
 * 修复了一个 this 导致的创建数据错误！！、
 *
 * v1.2
 * 2014年5月2日16:07:17
 * 修改before方法为pre
 * 2014年6月24日00:44:35
 * pre方法特征值为 __isPreCreate...
 * 避免污染原有的 update 数据
 */





/**
 * Schema 的 statics 静态方法是运行在 模型上的
 * Schema 的 methods 原型方法是运行在 模型实例上的
 */



var libs = require('./libs/index.js');

module.exports = {
    validate: libs.validate,

    filter: libs.filter,

    /**
     * 附加一个 Schema 对象3个自定义方法（增删改），
     * 并执行数据验证、数据过滤、数据前置操作
     * @param  {Object} 数据结构
     * @param  {Object} 一个验证方法的实例化对象
     * @param  {Object} 一个过滤对象
     * @version 1.0
     * 2014年4月18日01:58:00
     */
    validateFilter: function(Schema, validate, filter) {
        var emptyObject = {
            queue: [],
            order: [],
        };

        validate = validate !== undefined ? validate._get() : emptyObject;
        filter = filter !== undefined ? filter._get() : emptyObject;




        /**
         * 验证数据是否合法，但不插入数据库
         * 此过程为 createOne 之前操作
         * @param  {Object}   新数据
         * @param  {Function} 回调
         *
         * 回调
         * error: 错误对象
         * data: 过滤后的数据
         *
         * @version 1.0
         * 2014年4月26日19:43:41
         */
        Schema.statics.preCreateOne = function(createData, callback) {
            var _this = this;
            (function(validate) {
                // 1. validate
                asyncCheck.call(_this, '__isPreCreate', createData, validate, function(validateError) {
                    if (validateError) return callback(validateError, null);

                    // 2. filter
                    asyncCheck.call(_this, '__isPreCreate', createData, filter, function(filterError, filterData) {
                        if (filterError) return callback(filterError, null);

                        // 3. beforeCreate
                        callback(filterError, filterData);

                    });
                });
            })(validate);
        };





        /**
         * 新增一个文档实例
         * @param  {Object}   新数据
         * @param  {Function} 回调
         *
         * 回调
         * error: 错误对象
         * doc: 新增的文档对象
         *
         * @version 1.0
         * 2014年4月16日01:06:27
         */
        Schema.statics.createOne = function(createData, callback) {
            var _this = this;
            (function(validate) {
                // 1. validate
                asyncCheck.call(_this, '__isCreate', createData, validate, function(validateError) {
                    if (validateError) return callback(validateError, null);

                    // 2. filter
                    asyncCheck.call(_this, '__isCreate', createData, filter, function(filterError, filterData) {
                        if (filterError) return callback(filterError, null);

                        // 3. create
                        _this.create(filterData, callback);
                    });
                });
            })(validate);
        };


        /**
         * 验证数据是否合法，但不插入数据库
         * 此过程为 updateOne 之前操作
         * @param  {Object}   新数据
         * @param  {Function} 回调
         *
         * 回调
         * error: 错误对象
         * data: 过滤后的数据
         *
         * @version 1.1
         * 2014年4月26日19:43:41
         * 2014年4月29日02:01:33
         * 回调参数变化
         */
        Schema.statics.preUpdateOne = function(conditions, updateData, callback) {
            var _this = this;
            (function(validate) {
                validate = valiteId(validate);
                var data = merge(conditions, updateData);
                // 1. validate
                asyncCheck.call(_this, '__isPreUpdate', data, validate, function(validateError) {
                    if (validateError) return callback(validateError, null);

                    // 2. filter
                    asyncCheck.call(_this, '__isPreUpdate', data, filter, function(filterError, filterData) {
                        if (filterError) return callback(filterError, null);

                        // 3. findOne
                        // 数据分开
                        var i, filterUpdateData = {};
                        for (i in updateData) {
                            filterUpdateData[i] = filterData[i];
                        }
                        for (i in conditions) {
                            conditions[i] = filterData[i];
                        }
                        _this.findOne(conditions, function(e, doc) {
                            callback(e, filterUpdateData, doc);
                        });
                    });
                });
            })(validate);
        };


        /**
         * 更新一个文档
         * @param  {Object}   查询条件
         * @param  {Object}   更新数据
         * @param  {Function} 回调
         *
         * 回调
         * error: 错误对象
         * doc: 更新后的文档对象
         *
         * @version 1.0
         * 2014年4月16日01:06:27
         */
        Schema.statics.updateOne = function(conditions, updateData, callback) {
            var _this = this;
            (function(validate) {
                validate = valiteId(validate);
                var data = merge(conditions, updateData);
                // 1. validate
                asyncCheck.call(_this, '__isUpdate', data, validate, function(validateError) {
                    if (validateError) return callback(validateError, null);

                    // 2. filter
                    asyncCheck.call(_this, '__isUpdate', data, filter, function(filterError, filterData) {
                        if (filterError) return callback(filterError, null);

                        // 3. update
                        // 数据分开
                        var i, filterUpdateData = {};
                        for (i in updateData) {
                            filterUpdateData[i] = filterData[i];
                        }
                        for (i in conditions) {
                            conditions[i] = filterData[i];
                        }
                        _this.findOneAndUpdate(conditions, filterUpdateData, callback);
                    });
                });
            })(validate);
        };



        /**
         * 验证数据是否合法，但不移除数据
         * 此过程为 removeOne 之前操作
         * @param  {Object}   新数据
         * @param  {Function} 回调
         *
         * 回调
         * error: 错误对象
         * data: 过滤后的数据
         *
         * @version 1.1
         * 2014年4月26日19:43:41
         * 2014年4月29日02:02:14
         * 回调参数变化
         */
        Schema.statics.preRemoveOne = function(conditions, callback) {
            var _this = this;
            (function(validate) {
                validate = valiteId(validate);
                // 1. validate
                asyncCheck.call(_this, '__isPreRemove', conditions, validate, function(validateError) {
                    if (validateError) return callback(validateError, null);

                    // 2. filter
                    asyncCheck.call(_this, '__isPreRemove', conditions, filter, function(filterError, filterData) {
                        if (filterError) return callback(filterError, null);

                        // 3. find One
                        _this.findOne(filterData, callback);
                    });
                });
            })(validate);
        };


        /**
         * 移除一个文档
         * @param  {Object}   查询条件
         * @param  {Function} 回调
         *
         * 回调
         * error: 错误对象
         * doc: 移除的文档对象
         *
         * @version 1.0
         * 2014年4月16日01:06:27
         */
        Schema.statics.removeOne = function(conditions, callback) {
            var _this = this;
            (function(validate) {
                validate = valiteId(validate);
                // 1. validate
                asyncCheck.call(_this, '__isRemove', conditions, validate, function(validateError) {
                    if (validateError) return callback(validateError, null);

                    // 2. filter
                    asyncCheck.call(_this, '__isRemove', conditions, filter, function(filterError, filterData) {
                        if (filterError) return callback(filterError, null);

                        // 3. remove
                        _this.findOneAndRemove(filterData, callback);
                    });
                });
            })(validate);
        };



    },
};









/////////////////////////////////////////////////////////////////////////
////////////////////////// private API //////////////////////////////////
/////////////////////////////////////////////////////////////////////////


/**
 * 异步验证，并执行回调
 * @param  {String}   操作情况 __isCreate 、 __isUpdate 、 __isRemove
 * @param  {Object}   数据模型
 * @param  {Object}   待验证的数据
 * @param  {Object}   验证的规则
 * @param  {Boolean}  是否跳过未定义的值
 * @param  {Function} 验证回调
 *
 * 是否跳过未定义的数据:
 * 就是字段的值为未定义的时候
 * 通常新增数据是不能跳过的，而更新数据是可以的
 *
 * 验证回调:
 * error: 错误对象，如果为null则表示全部验证通过
 *
 * @version 1.1
 * 2014年4月17日23:47:36
 * 2014年4月27日20:58:49
 * 先要设置其他判断值为 false，否则会导致对象共享出现错误
 */

function asyncCheck(operationType, data, checkRuleOrFilterRule, callback) {
    (function(_this) {
        var value;

        // 2014年4月27日20:58:58
        _this.__isCreate = false;
        _this.__isUpdate = false;
        _this.__isRemove = false;

        _this[operationType] = true;

        var order = checkRuleOrFilterRule.order;
        var orderIndex = 0;
        var orderLength = order.length;
        var orderPath = '';


        var queue = checkRuleOrFilterRule.queue;
        var queueItems;
        var queueItemsIndex = 0;
        var queueItemsLength = 0;
        var queueItem;


        // 递归 order

        (function _order() {
            if (orderIndex === orderLength) {
                callback(null, data);
            } else {
                // 字段
                orderPath = order[orderIndex];
                // 值
                value = data[orderPath];

                //  创建时 && 字段为_id
                //  或
                //  非创建时 && 数据为 undefined 时
                if (_this.__isCreate && orderPath === '_id' || !_this.__isCreate && value === undefined) {
                    orderIndex++;
                    _order();
                } else {
                    // 规则
                    queueItems = queue[orderPath];
                    queueItemsIndex = 0;
                    queueItemsLength = queueItems.length;

                    (function _queue() {
                        if (queueItemsIndex === queueItemsLength) {
                            orderIndex++;
                            _order();
                        } else {
                            queueItem = queueItems[queueItemsIndex];
                            // validate
                            if (queueItem.msg !== undefined) {
                                queueItem.validator.call(_this, value, function(boolean) {
                                    if (boolean === true) {
                                        queueItemsIndex++;
                                        _queue();
                                    } else if (boolean.constructor === Error) {
                                        callback(boolean, data);
                                    } else {
                                        callback(new Error(queueItem.msg), data);
                                    }
                                });
                            }
                            // filter
                            else {
                                queueItem.filter.call(_this, data[orderPath], function(result) {
                                    queueItemsIndex++;
                                    data[orderPath] = result;
                                    _queue();
                                });
                            }
                        }
                    })();
                }
                // end queue
            }
            // end order
        })();

    })(this);
}


// 合并两个对象

function merge(objectA, objectB) {
    var objectC = {};
    var i;

    for (i in objectA) {
        objectC[i] = objectA[i];
    }

    for (i in objectB) {
        objectC[i] = objectB[i];
    }

    return objectC;
}




// id的验证规则

function valiteId(validate) {
    if (validate.queue._id === undefined) {
        validate.queue._id = [];
        validate.queue._id.unshift({
            validator: function(value, next) {
                next(/^[\da-z]{24}$/.test(value));
            },
            msg: 'ID格式不正确！',
        });
        validate.order.unshift('_id');
    }
    return validate;
}
