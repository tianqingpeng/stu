/**
 * Schema 验证方法
 * @version 1.1
 * @author ydr.me
 */



/**
 * v1.0
 * 2014年4月12日22:01:15
 * 参考 https://www.npmjs.org/package/mongoose-validator
 *
 * v1.1
 * 2014年4月17日22:19:23
 * 重写，作用于自定义的静态方法
 * 2014年4月18日21:27:13
 * 增加了几个默认方法，并修正部分BUG
 * 2014年4月20日19:26:51
 * 修正了几个类型严格验证BUG
 * 2014年7月12日23:35:04
 * 修正了对 exist 的严格判断
 */



/**
    type: string,number,regexp,function,nan,email,url
    required: true/false
    exist: true/false
    trim: true/false
    length: 数值
    minLength: 数值
    maxLength: 数值
    min: 数值
    max: 数值
    regExp: 正则
    callback:
    this=Schema
    function(value, respond){
        respond(value === '123');
    }
*/



////////////////////////////////////////////////
/////////////////// example /////////////////////
/////////////////////////////////////////////////

// var validate = new Validate();
// validate.add('user', {
//  type: 'string',
//  msg: 'user类型不正确',
// });
// validate.add('user', {
//  callback: function(value){
//      return value + 1 < 10;
//  },
//  msg: 'user类型不正确',
// });

/////////////////////////////////////////////////
/////////////////// example /////////////////////
/////////////////////////////////////////////////




var Validate = function() {
    this.queue = {};
    this.order = [];
};
var tool = require('./tool.js');


/**
 * 增加验证规则
 * @param  {String} path 字段
 * @param  {Object} rule 验证规则
 */
Validate.prototype.add = function(path, rule) {
    var validateType = tool.getValidateTypeOfRule(rule);
    var queueItem;

    switch (validateType) {


        case 'type':
            queueItem = {
                validator: function(value, respond) {
                    if (rule.exist && _isEmpty(value)) return respond(true);
                    var type = rule.type.toLowerCase();
                    switch (type) {
                        case 'email':
                            respond(tool.isEmail(value));
                            break;
                        case 'url':
                            respond(tool.isUrl(value));
                            break;
                        default:
                            respond(tool.type(value) === type);
                            break;
                    }
                },
                msg: rule.msg || '类型不正确！',
            };
            break;


        case 'required':
            if (rule.required) {
                queueItem = {
                    validator: function(value, respond) {
                        if (rule.trim) {
                            if (!tool.isStringOrNumber(value)) return respond(false);
                            value = String(value).trim();
                        }
                        if (!tool.isStringOrNumber(value)) return respond(false);
                        value = String(value);
                        respond(value.length>0);
                    },
                    msg: rule.msg || '不能为空！',
                };
            }
            break;



        case 'length':
            queueItem = {
                validator: function(value, respond) {
                    if (rule.exist && _isEmpty(value)) return respond(true);
                    if (!tool.isStringOrNumber(value)) return respond(false);
                    value = String(value);
                    if (rule.trim) value = value.trim();
                    respond(value.length === rule.length);
                },
                msg: rule.msg || '长度必须是' + rule.length + '！',
            };
            break;


        case 'minLength':
            queueItem = {
                validator: function(value, respond) {
                    if (rule.exist && _isEmpty(value)) return respond(true);
                    if (!tool.isStringOrNumber(value)) return respond(false);
                    value = String(value);
                    if (rule.trim) value = value.trim();
                    respond(value.length >= rule.minLength);
                },
                msg: rule.msg || '长度不能小于' + rule.minLength + '位！',
            };
            break;


        case 'maxLength':
            queueItem = {
                validator: function(value, respond) {
                    if (rule.exist && _isEmpty(value)) return respond(true);
                    if (!tool.isStringOrNumber(value)) return respond(false);
                    value = String(value);
                    if (rule.trim) value = value.trim();
                    respond(value.length <= rule.maxLength);
                },
                msg: rule.msg || '长度不能大于' + rule.maxLength + '位！',
            };
            break;


        case 'min':
            queueItem = {
                validator: function(value, respond) {
                    if (rule.exist && _isEmpty(value)) return respond(true);
                    if (tool.type(value) !== 'number') return respond(false);
                    respond(value >= rule.min);
                },
                msg: rule.msg || '值不能小于' + rule.min + '！',
            };
            break;


        case 'max':
            queueItem = {
                validator: function(value, respond) {
                    if (rule.exist && _isEmpty(value)) return respond(true);
                    if (tool.type(value) !== 'number') return respond(false);
                    respond(value <= rule.max);
                },
                msg: rule.msg || '值不能大于' + rule.max + '！',
            };
            break;


        case 'regExp':
            if (tool.type(rule.regExp) === 'regexp') {
                queueItem = {
                    validator: function(value, respond) {
                        if (rule.exist && _isEmpty(value)) return respond(true);
                        if (!tool.isStringOrNumber(value)) return respond(false);
                        value = String(value);
                        if (rule.trim) value = value.trim();
                        respond(value !== undefined && rule.regExp.test(value));
                    },
                    msg: rule.msg || '不符合要求！',
                };
            }
            break;


        case 'callback':
            if (tool.type(rule.callback) === 'function') {
                queueItem = {
                    validator: rule.callback,
                    msg: rule.msg || '不符合要求！',
                };
            }
            break;


        default:
            throw new Error('validate method ' + validateType + ' does not exist!');
            break;
    }

    if (this.queue[path] === undefined) this.queue[path] = [];
    this.queue[path].push(queueItem);
    if (tool.inArray(path, this.order) === -1) this.order.push(path);
};


Validate.prototype._get = function() {
    return {
        queue: this.queue,
        order: this.order,
    };
}



function _isEmpty(value){
    return value === undefined || value === null || value === '';
}



module.exports = Validate;
