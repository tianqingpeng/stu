/**
 * Schema 过滤方法
 * @version 1.0
 * @author ydr.me
 */



/**
 * v1.0
 * 2014年4月18日01:06:02
 * 初始构造
 * 2014年4月18日21:13:31
 * 增加了几个默认方法
 * 2014年4月21日13:30:09
 * 过滤数据更加严谨
 */


/**
    lowercase: 转换为小写
    uppercase: 转换为大写
    trim: 去除左右空白
    callback:
        this=Schema
        function(value, respond){
            respond(value + '123');
        }
*/


////////////////////////////////////////////////
/////////////////// example /////////////////////
/////////////////////////////////////////////////

// var filter = new Filter();
// filter.add('user', 'lowercase');
// filter.add('user', function(value, respond){
//      respond(value + 1);
// });

/////////////////////////////////////////////////
/////////////////// example /////////////////////
/////////////////////////////////////////////////



var tool = require('./tool.js');


var Filter = function() {
    this.queue = {};
    this.order = [];
};


/**
 * 增加过滤规则
 * @param  {String}          字段
 * @param  {String/Function} 验证规则
 */
Filter.prototype.add = function(path, filter) {
    var ruleType = tool.type(filter);
    var queueItem = {};

    if (ruleType === 'string') {
        switch (filter) {
            // 小写
            case 'lowercase':
                queueItem.filter = function(value, respond) {
                    if(tool.type(value)==='string') return respond(String(value).toLowerCase());
                    respond(value);
                };
                break;
                // 大写
            case 'uppercase':
                queueItem.filter = function(value, respond) {
                    if(tool.type(value)==='string') return respond(String(value).toUpperCase());
                    respond(value);
                };
                // 去除左右空格
            case 'trim':
                queueItem.filter = function(value, respond) {
                    if(tool.type(value)==='string') return respond(String(value).trim());
                    respond(value);
                };
                break;
                // 默认
            default:
                queueItem.filter = function(value, respond) {
                    respond(value);
                };
        }
    } else if (ruleType === 'function') {
        queueItem.filter = filter;
    }

    if (this.queue[path] === undefined) this.queue[path] = [];
    if(queueItem!==undefined){
        this.queue[path].push(queueItem);
        if (tool.inArray(path, this.order) === -1) this.order.push(path);
    }
};


Filter.prototype._get = function() {
    return {
        queue: this.queue,
        order: this.order,
    };
}





module.exports = Filter;
