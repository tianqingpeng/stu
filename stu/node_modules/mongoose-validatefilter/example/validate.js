// validate默认的有以下规则：
/**
    type: string,number,regexp,function,nan,email,url
    required: true/false 是否必填项
    exist: true/false 是否存在即验证
    trim: true/false 是否去除左右空白后验证
    length: 字符串（数值字符串化）长度
    minLength: 字符串（数值字符串化）最小长度
    maxLength: 字符串（数值字符串化）最大长度
    min: 数值最小值
    max: 数值最大值
    regExp: 正则
    callback: 回调
        this=Schema
        function(value, respond){
            respond(value === '123');
        }
*/

// 假设用户表有以下两个字段
// email
// nickname
validate.add('email', {
    required: true,
    msg: '邮箱不能为空！',
});

validate.add('email', {
    type: 'string',
    msg: '邮箱必须为字符串格式！',
});

validate.add('email', {
    type: 'email',
    msg: '邮箱格式不正确！',
});

validate.add('email', {
    maxLength: 120,
    msg: '邮箱长度不能超过120个字符！',
});

validate.add('email', {
    callback: function(value, respond) {
        value = String(value).trim().toLowerCase();
        // 这里有3个判断值，分别为：
        // __isCreate: 执行 cretaOne 时为真
        // __isUpdate: 执行 updateOne 时为真
        // __isRemove: 执行 removeOne 时为真
        if (this.__isCreate) {
            this.model('User').findOne({
                email: value,
            }, function(e, doc) {
                if (e) return respond(e);
                respond(!doc);
            });
        } else {
            respond(true);
        }
    },
    msg: '邮箱重复！',
});


validate.add('nickname', {
    exist: true,
    type: 'string',
    msg: '昵称必须为字符串格式！',
});

validate.add('nickname', {
    exist: true,
    trim: true,
    minLength: 2,
    msg: '昵称长度至少为2个字符',
});

validate.add('nickname', {
    exist: true,
    trim: true,
    maxLength: 12,
    msg: '昵称长度最多为12个字符',
});
